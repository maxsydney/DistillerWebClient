// @generated by protobuf-ts 1.0.13 with parameters enable_angular_annotations,long_type_string
// @generated from protobuf file "MessageBase.proto" (syntax proto3)
// tslint:disable
import { BinaryWriteOptions } from "@protobuf-ts/runtime";
import { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import { BinaryReadOptions } from "@protobuf-ts/runtime";
import { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message MessageWrapper
 */
export interface MessageWrapper {
    /**
     * @generated from protobuf field: PBMessageType type = 1;
     */
    type: PBMessageType;
    /**
     * @generated from protobuf field: bytes payload = 3;
     */
    payload: Uint8Array;
}
/**
 * @generated from protobuf enum PBMessageType
 */
export enum PBMessageType {
    /**
     * @generated from protobuf enum value: Unknown = 0;
     */
    Unknown = 0,
    /**
     * @generated from protobuf enum value: General = 1;
     */
    General = 1,
    /**
     * @generated from protobuf enum value: TemperatureData = 2;
     */
    TemperatureData = 2,
    /**
     * @generated from protobuf enum value: FlowrateData = 3;
     */
    FlowrateData = 3,
    /**
     * @generated from protobuf enum value: ControllerTuning = 4;
     */
    ControllerTuning = 4,
    /**
     * @generated from protobuf enum value: ControllerCommand = 5;
     */
    ControllerCommand = 5,
    /**
     * @generated from protobuf enum value: ControllerSettings = 6;
     */
    ControllerSettings = 6,
    /**
     * @generated from protobuf enum value: ControllerDataRequest = 7;
     */
    ControllerDataRequest = 7,
    /**
     * @generated from protobuf enum value: SensorManagerCommand = 8;
     */
    SensorManagerCommand = 8,
    /**
     * @generated from protobuf enum value: DeviceData = 9;
     */
    DeviceData = 9,
    /**
     * @generated from protobuf enum value: AssignSensor = 10;
     */
    AssignSensor = 10,
    /**
     * @generated from protobuf enum value: ConcentrationData = 11;
     */
    ConcentrationData = 11,
    /**
     * @generated from protobuf enum value: ControllerState = 12;
     */
    ControllerState = 12,
    /**
     * @generated from protobuf enum value: SocketLog = 13;
     */
    SocketLog = 13
}
/**
 * Type for protobuf message MessageWrapper
 */
class MessageWrapper$Type extends MessageType<MessageWrapper> {
    constructor() {
        super("MessageWrapper", [
            { no: 1, name: "type", kind: "enum", T: () => ["PBMessageType", PBMessageType] },
            { no: 3, name: "payload", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<MessageWrapper>): MessageWrapper {
        const message = { type: 0, payload: new Uint8Array(0) };
        if (value !== undefined)
            reflectionMergePartial<MessageWrapper>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MessageWrapper): MessageWrapper {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PBMessageType type */ 1:
                    message.type = reader.int32();
                    break;
                case /* bytes payload */ 3:
                    message.payload = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MessageWrapper, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PBMessageType type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* bytes payload = 3; */
        if (message.payload.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.payload);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const MessageWrapper = new MessageWrapper$Type();
